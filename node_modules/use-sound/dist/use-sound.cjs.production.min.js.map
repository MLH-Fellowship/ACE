{"version":3,"file":"use-sound.cjs.production.min.js","sources":["../src/index.ts","../src/use-on-mount.ts"],"sourcesContent":["import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    // @ts-ignore\n    setDuration(this.duration() * 1000);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    let isCancelled = false;\n\n    import('howler').then(mod => {\n      if (!isCancelled) {\n        HowlConstructor.current = mod.Howl;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n    return () => {\n      isCancelled = true;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      sound.once('end', () => setIsPlaying(false));\n\n      setIsPlaying(true);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n      setIsPlaying(false);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n      setIsPlaying(false);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","useRef","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","this","isCancelled","then","mod","current","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","pause"],"mappings":"4XAOEA,oBAQiB,YANfC,OAAAA,aAAS,QACTC,aAAAA,aAAe,QACfC,aAAAA,oBACAC,UAAAA,gBACAC,IAAAA,OACGC,sMAGCC,EAAkBC,EAAMC,OAA0B,QAEtBD,EAAME,UAAS,GAA1CC,OAAWC,SACcJ,EAAME,SAAwB,MAAvDG,OAAUC,SAESN,EAAME,SAAsB,MAA/CK,OAAOC,OAERC,EAAa,WACK,mBAAXZ,GAETA,EAAOa,KAAKC,MAIdL,EAA8B,IAAlBK,KAAKN,aC5BnBL,aDgCW,eACLY,GAAc,uRAEX,eAAUC,MAAK,SAAAC,OACfF,EAAa,CAChBb,EAAgBgB,QAAUD,EAAIE,SAExBT,EAAQ,IAAIR,EAAgBgB,WAChCE,IAAK,CAACzB,GACNC,OAAAA,EACAyB,KAAMxB,EACNG,OAAQY,GACLX,IAGLU,EAASD,OAGN,WACLK,GAAc,KCnDQ,ID0D1BZ,EAAMmB,WAAU,WACVpB,EAAgBgB,SAAWR,GAC7BC,EACE,IAAIT,EAAgBgB,WAClBE,IAAK,CAACzB,GACNC,OAAAA,EACAI,OAAQY,GACLX,OAQR,CAACN,IAIJQ,EAAMmB,WAAU,WACVZ,IACFA,EAAMd,OAAOA,GACbc,EAAMW,KAAKxB,MAOZ,CAACD,EAAQC,QAEN0B,EAAqBpB,EAAMqB,aAC/B,SAACC,QACwB,IAAZA,IACTA,EAAU,IAGPf,IAAWZ,GAAiB2B,EAAQC,qBAIrC3B,GACFW,EAAMiB,OAGJF,EAAQ5B,cACVa,EAAMW,KAAKI,EAAQ5B,cAGrBa,EAAMa,KAAKE,EAAQG,IAEnBlB,EAAMmB,KAAK,OAAO,kBAAMtB,GAAa,MAErCA,GAAa,MAEf,CAACG,EAAOZ,EAAcC,IAGlB4B,EAAOxB,EAAMqB,aACjB,SAAAI,GACOlB,IAGLA,EAAMiB,KAAKC,GACXrB,GAAa,MAEf,CAACG,IAGGoB,EAAQ3B,EAAMqB,aAClB,SAAAI,GACOlB,IAGLA,EAAMoB,MAAMF,GACZrB,GAAa,MAEf,CAACG,UAGkC,CACnCa,EACA,CACEb,MAAAA,EACAiB,KAAAA,EACAG,MAAAA,EACAxB,UAAAA,EACAE,SAAAA"}